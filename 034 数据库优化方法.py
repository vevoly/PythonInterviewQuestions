# _*_ coding: utf-8 _*_
__author__ = 'jevoly'
__date__ = '2019/2/16 0016 上午 12:27'

"""
1 外键
2 索引
3 联合查询
4 选定特定字段
"""

"""
1 选取最适用的字段属性
数据库中的表越小，在它上面执行的查询就越快。
在创建表的时候，为了获取更好的性能，我们可以将表中字段宽度设得尽可能小。
应该尽量把字段设置为not null，这样在执行查询的时候数据库不用去比较null值。
对于某些文本字段，例如性别，我们可以将他们定义为enum类型，
因为在mysql中，enum类型被当做数值型来处理，而数值型被处理起来比文本类型要快得多。

2 使用连接（join）来代替子查询
使用子查询可以一次性完成很多逻辑上需要多个步骤才能完成的sql操作，同时也可避免事务或者表锁死，
并且写起来也容易。但是，有些情况下，子查询可以被更有效率的join替代
join之所以更有效率一些，是因为mysql不需要在内存中创建临时表来完成这个逻辑上需要两个步骤的查询。

3 使用union来替代手动创建的临时表
union可以把需要使用临时表的两条或更多select查询合并到一个查询中。
在客户端的查询回话结束的时候，临时表会被自动删除，从而保证数据库整齐、高效。

4 事务


5 锁定表


6 使用外键
外键可以保证每条销售记录都指向某一个存在的客户，
任何一条没有合法客户id的销售记录都不会被更新或插入到销售记录中。

7 使用索引
索引是提高数据库性能的常用方法，它可以令数据库服务器比没有索引快的uo的舒服检索特定行，
尤其是在查询语句中包含max(),min()和orderby这些命令的时候，性能提高更为明显。
一般来说，索引应该建立在那些将用于join、where判断和orderby排序的字段上，
尽量不要对数据库中某个含有大量重复的值的字段建立索引。

8 优化查询语句
  1 最好是在相同类型的字段间进行比较
  2 在建有索引的字段上尽量不要使用函数操作
  3 在搜索字符型字段时，我们有时会使用like关键字和通配符，
  这种做法虽然简单，但却也是以牺牲系统性能为代价的。
  例如：
  select * from books where name like 'mysql%'
  换成下面的语句就会快很多
  select * from books where name >= 'mysql' and name <='mysql'
  4 避免在查询中让mysql进行自动类型转换，因为转换过程也会让索引变得不起作用。


"""